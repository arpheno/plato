name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test-python:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Cache uv dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: ${{ runner.os }}-python-${{ matrix.python-version }}-uv-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-python-${{ matrix.python-version }}-uv-

      - name: Install dependencies
        run: |
          uv venv .venv
          source .venv/bin/activate
          uv pip install -e "packages/plato-core[dev]"
          uv pip install -e "packages/plato-cli[dev]"
          uv pip install -e "packages/plato-api[dev]"

      - name: Run tests with coverage
        run: |
          source .venv/bin/activate
          pytest --cov=plato_core --cov=plato_cli --cov=plato_api --cov-report=xml --cov-report=html

      - name: Upload Python coverage report
        uses: actions/upload-artifact@v4
        with:
          name: python-coverage-report-${{ matrix.python-version }}
          path: |
            htmlcov/
            coverage.xml
          if-no-files-found: error

  test-frontend:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
          cache-dependency-path: packages/plato-web/package-lock.json

      - name: Install dependencies
        working-directory: packages/plato-web
        run: npm ci

      - name: Run tests with coverage
        working-directory: packages/plato-web
        run: npm run test:coverage

      - name: Upload frontend coverage report
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage-report-${{ matrix.node-version }}
          path: packages/plato-web/coverage/
          if-no-files-found: error

  publish-coverage:
    needs: [test-python, test-frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      pages: write
      id-token: write
      actions: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Download all coverage reports
        uses: actions/download-artifact@v4
        with:
          path: coverage-reports
          pattern: "*-coverage-report-*"
          merge-multiple: true

      - name: Setup Pages
        uses: actions/configure-pages@v4
        with:
          enablement: true
          source: workflow
          build_type: workflow

      - name: Upload coverage to Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: coverage-reports

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Cache uv dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: ${{ runner.os }}-python-3.11-uv-lint-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-python-3.11-uv-lint-

      - name: Install dependencies
        run: |
          uv venv .venv
          source .venv/bin/activate
          uv pip install ruff mypy black

      - name: Run linters
        run: |
          source .venv/bin/activate
          ruff check .
          black --check .
          mypy packages/plato-*/src

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18.x"
          cache: "npm"
          cache-dependency-path: packages/plato-web/package-lock.json

      - name: Install frontend dependencies
        working-directory: packages/plato-web
        run: npm ci

      - name: Run frontend linters
        working-directory: packages/plato-web
        run: npm run lint
