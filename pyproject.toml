[project]
name = "plato"
version = "0.1.0"
description = "DevOps automation platform for managing multiple side projects"
authors = []
dependencies = [
    "fastapi~=0.109.0",
    "uvicorn~=0.27.0",
    "pydantic~=2.6.0",
    "typer~=0.9.0",
    "python-jose[cryptography]~=3.3.0",
    "python-multipart~=0.0.9",
    "pyyaml~=6.0.1",
]

[project.optional-dependencies]
dev = [
    "pytest~=8.0.0",
    "pytest-cov~=4.1.0",
    "black~=24.1.0",
    "ruff~=0.2.1",
    "mypy~=1.8.0",
    "pre-commit~=3.6.0",
    "httpx~=0.27.0",
    "pytest-mock~=3.12.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.pytest.ini_options]
testpaths = ["packages/plato-core/tests", "packages/plato-cli/tests", "packages/plato-api/tests"]
python_files = ["test_*.py"]
addopts = "-v --cov=plato_core --cov=plato_cli --cov=plato_api --cov-report=term-missing --cov-report=html:coverage_html --cov-report=xml"

[tool.coverage.run]
branch = true
source = ["packages/plato-core/src", "packages/plato-cli/src", "packages/plato-api/src"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if TYPE_CHECKING:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "\\.\\.\\."
]
show_missing = true
fail_under = 90

[tool.coverage.html]
directory = "coverage_html"

[tool.coverage.xml]
output = "coverage.xml"

[tool.ruff.lint]
select = ["E", "F", "I", "N", "W"]
ignore = []

[tool.ruff]
line-length = 88

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
explicit_package_bases = true
namespace_packages = true
mypy_path = ["packages/plato-core/src", "packages/plato-cli/src", "packages/plato-api/src"]
exclude = ["tests/.*"]

[[tool.mypy.overrides]]
module = ["*.tests.*"]
disallow_untyped_defs = false

# Custom test commands
[tool.hatch.envs.test]
dependencies = [
    "pytest",
    "pytest-cov",
    "pytest-asyncio",
    "httpx",
]

[tool.hatch.envs.test.scripts]
test = "pytest {args}"
test-cov = "pytest --cov=plato_core --cov=plato_cli --cov=plato_api --cov-report=term-missing --cov-report=html"
test-watch = "pytest-watch -- {args}"
test-core = "pytest packages/plato-core/tests {args}"
test-cli = "pytest packages/plato-cli/tests {args}"
test-api = "pytest packages/plato-api/tests {args}"

[tool.hatch.build.targets.wheel]
packages = ["packages/plato-core", "packages/plato-cli", "packages/plato-api"]
